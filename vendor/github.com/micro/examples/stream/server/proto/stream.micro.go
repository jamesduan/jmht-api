// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/examples/stream/server/proto/stream.proto

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/examples/stream/server/proto/stream.proto

It has these top-level messages:
	Request
	Response
*/
package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Streamer service

type StreamerClient interface {
	Stream(ctx context.Context, opts ...client.CallOption) (Streamer_StreamClient, error)
	ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Streamer_ServerStreamClient, error)
}

type streamerClient struct {
	c           client.Client
	serviceName string
}

func NewStreamerClient(serviceName string, c client.Client) StreamerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "streamer"
	}
	return &streamerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *streamerClient) Stream(ctx context.Context, opts ...client.CallOption) (Streamer_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Streamer.Stream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &streamerStreamClient{stream}, nil
}

type Streamer_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Request) error
	Recv() (*Response, error)
}

type streamerStreamClient struct {
	stream client.Streamer
}

func (x *streamerStreamClient) Close() error {
	return x.stream.Close()
}

func (x *streamerStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerStreamClient) Send(m *Request) error {
	return x.stream.Send(m)
}

func (x *streamerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamerClient) ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Streamer_ServerStreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Streamer.ServerStream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &streamerServerStreamClient{stream}, nil
}

type Streamer_ServerStreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Response, error)
}

type streamerServerStreamClient struct {
	stream client.Streamer
}

func (x *streamerServerStreamClient) Close() error {
	return x.stream.Close()
}

func (x *streamerServerStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerServerStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Streamer service

type StreamerHandler interface {
	Stream(context.Context, Streamer_StreamStream) error
	ServerStream(context.Context, *Request, Streamer_ServerStreamStream) error
}

func RegisterStreamerHandler(s server.Server, hdlr StreamerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Streamer{hdlr}, opts...))
}

type Streamer struct {
	StreamerHandler
}

func (h *Streamer) Stream(ctx context.Context, stream server.Streamer) error {
	return h.StreamerHandler.Stream(ctx, &streamerStreamStream{stream})
}

type Streamer_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
	Recv() (*Request, error)
}

type streamerStreamStream struct {
	stream server.Streamer
}

func (x *streamerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *streamerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

func (x *streamerStreamStream) Recv() (*Request, error) {
	m := new(Request)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *Streamer) ServerStream(ctx context.Context, stream server.Streamer) error {
	m := new(Request)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.StreamerHandler.ServerStream(ctx, m, &streamerServerStreamStream{stream})
}

type Streamer_ServerStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
}

type streamerServerStreamStream struct {
	stream server.Streamer
}

func (x *streamerServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *streamerServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerServerStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}
